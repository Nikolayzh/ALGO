 /* RMQ снизу */
     class RMQ {
         int[] val; // массив значений
         int[] ind; // массив индексов
         int n; // размер "виртуального" массива
         
       :         /* Конструктор для пустого RMQ */
       :         RMQ(int n) {
       :             this.n = n;
       :             val = new int [2 * n + 1];
       :             ind = new int [2 * n + 1];
       :             Arrays.fill(val, INF); // заполняем массив значений
       :             Arrays.fill(ind, 0);
       :             for (int i = 0; i < n; i++)
       :                 ind[n + i] = i; // не забываем заполнить массив индексов
       :         }
       :         
       :         /* Конструктор RMQ по массиву */
       :         RMQ(int[] a) {
       :             this.n = a.length;
       :             val = new int [2 * n + 1];
       :             ind = new int [2 * n + 1];
       :             for (int i = 0; i < n; i++) {
       :                 val[n + i] = a[i];
       :                 ind[n + i] = i;
       :             }
       :             for (int v = n - 1; v > 0; v--) { // бежим по всем вершинам
       :                 int l = v << 1; // номер левого сына
       :                 int r = l + 1; // номер правого сына
       :                 if (val[l] < val[r]) { // если левом сыне значение меньше
       :                     val[v] = val[l]; // берем его значение
       :                     ind[v] = ind[l]; // и индекс
       :                 } else { // иначе нас интерисует правый сын
       :                     val[v] = val[r]; // берем его значение
       :                     ind[v] = ind[r]; // и индекс
:                 }
:             }
:         }
:         
:         /* Поместить в элемент с индексом i значение value */
:         void set(int i, int value) {
:             i += n; // получаем номер вершины в RMQ
:             val[i] = value; // помещаем значение
:             for (int v = i >> 1; v > 0; v >>= 1) { // бежим по предкам
:                 int l = v << 1; // номер левого сына
:                 int r = l + 1; // номер правого сына
:                 if (val[l] < val[r]) { // если левом сыне значение меньше
:                     val[v] = val[l]; // берем его значение
:                     ind[v] = ind[l]; // и индекс
0049:                 } else { // иначе нас интерисует правый сын
0050:                     val[v] = val[r]; // берем его значение
0051:                     ind[v] = ind[r]; // и индекс
0052:                 }
0053:             }
0054:         }
0055:         
0056:         /* Получить значение элемента с индексом i */
0057:         int get(int i) {
0058:             return val[i + n];
0059:         }
0060:         
0061:         /* Получить значение минимального элемента на отрезке [l, r] */
0062:         int minVal(int l, int r) {
0063:             l += n; // получаем номер левой вершины
0064:             r += n; // получаем номер правой вершины
0065:             int ret = INF; // возвращаемое значение (минимум для запроса)
0066:             while (l <= r) { // пока вершины не пересеклись
0067:                 if ((l & 1) == 1) // если левое поддерево "отпадет"
0068:                     ret = Math.min(ret, val[l]); // то учтем его значение
0069:                 if ((r & 1) == 0) // если правое поддерево "отпадет"
0070:                     ret = Math.min(ret, val[r]); // то учтем его значение
0071:                 l = (l + 1) >> 1; // сделаем переход для левой вершины
0072:                 r = (r - 1) >> 1; // сделаем переход для правой вершины
0073:             }
0074:             return ret;
0075:         }
0076:         
0077:         /* Получить номер минимального элемента на отрезке [l, r] (если нет, то -1) */
0078:         int minInd(int l, int r) {
0079:             l += n; // получаем номер левой вершины
0080:             r += n; // получаем номер правой вершины
0081:             int min = INF; // значение текущего минимального элемента
0082:             int ret = -1; // возвращаемое значение (номер минимального элемента)
0083:             while (l <= r) { // пока вершины не пересеклись
0084:                 if ((l & 1) == 1) // если левое поддерево "отпадет"
0085:                     if (min > val[l]) { // и значение в нем меньше текущего
0086:                         min = val[l]; // обновим текущее значение
0087:                         ret = ind[l]; // и индекс
0088:                     }
0089:                 if ((r & 1) == 0) // если правое поддерево "отпадет"
:                     if (min > val[r]) { // и значение в нем меньше текущего
:                         min = val[r]; // обновим текущее значение
:                         ret = ind[r]; // и индекс
:                     }
:                 l = (l + 1) >> 1; // сделаем переход для левой вершины
:                 r = (r - 1) >> 1; // сделаем переход для правой вершины
:             }
:             return ret;
:         }
:     }
