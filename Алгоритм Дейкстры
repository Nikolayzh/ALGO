/*Алгоритм Дейкстры позволяет найти кратчайшие пути от данной вершины до всех остальных вершин в графе. 
Алгоритм состоит из следующих шагов:
Положить для всех вершин (кроме исходной) расстояние dist(v) = INF, для исходной dist(start) = 0.
Выбрать непомеченную вершину v, с минимальным расстоянием. Если такой вершины нет, то завершить работу.
Пометить v.
Для всех непомеченных вершин, смежных с v, попытаться улучшить оценку расстояния.
Вернуться к шагу 2.*/

int INF = Integer.MAX_VALUE / 2; // "Бесконечность"
 int vNum; // количество вершин
 int[][] graph; // матрица смежности
 
 /* Алгоритм Дейкстры за O(V^2) */
 void dijkstra(int start) {
     boolean[] used = new boolean [vNum]; // массив пометок
     int[] dist = new int [vNum]; // массив расстояния. dist[v] = минимальное_расстояние(start, v)
   
 fill(dist, INF); // устанаавливаем расстояние до всех вершин INF
     dist[start] = 0; // для начальной вершины положим 0
   
   for (;;) {
       int v = -1;
       for (int nv = 0; nv < vNum; nv++) // перебираем вершины
           if (!used[nv] && dist[nv] < INF && (v == -1 || dist[v] > dist[nv])) // выбираем самую близкую непомеченную вершину
               v = nv;
       if (v == -1) break; // ближайшая вершина не найдена
             used[v] = true; // помечаем ее
             for (int nv = 0; nv < vNum; nv++)
                 if (!used[nv] && graph[v][nv] < INF) // для всех непомеченных смежных
                     dist[nv] = min(dist[nv], dist[v] + graph[v][nv]); // улучшаем оценку расстояния (релаксация)
    }
